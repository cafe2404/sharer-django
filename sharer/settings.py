'''
Django settings for sharer project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
'''

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-=^v2tvlr5fkidj%u1=c&=1ch4%7v19x)n5m9ychszs=q5+-vj-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
CSRF_TRUSTED_ORIGINS = ["http://localhost:8000"] 

# Application definition

INSTALLED_APPS = [
    'unfold',  # before django.contrib.admin
    'unfold.contrib.filters',  # optional, if special filters are needed
    'unfold.contrib.forms',  # optional, if special form elements are needed
    'unfold.contrib.inlines',  # optional, if special inlines are needed
    'unfold.contrib.import_export',  # optional, if django-import-export package is used
    'unfold.contrib.guardian',  # optional, if django-guardian package is used
    'unfold.contrib.simple_history',  # optional, if django-simple-history package is used
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'account',
    'platform_share',
    'store',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sharer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sharer.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Media setting
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]


#Cors settings 
CORS_ALLOW_ALL_ORIGINS = True  # Cho phép tất cả các nguồn truy cập vào API của bạn


#custom user model
AUTH_USER_MODEL = 'account.CustomUser'


#unfold admin setting
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _
from django.templatetags.static import static
UNFOLD = {
    'SITE_TITLE': 'Sharer Admin',
    'SITE_HEADER': 'Sharer Admin',
    'SITE_ICON':lambda request: static('logo.svg'),
        'SITE_FAVICONS': [
        {
            'rel': 'icon',
            'sizes': '32x32',
            'type': 'image/svg+xml',
            'href': lambda request: static('logo.svg'),
        },
    ],
     'COLORS': {
        'primary': {
            '50': '#eff6ff',
            '100': '#dbeafe',
            '200': '#c7d2fe',
            '300': '#a5b4fc',
            '400': '#818cf8',
            '500': '#6366f1',
            '600': '#4f46e5',
            '700': '#4338ca',
            '800': '#3730a3',
            '900': '#312e81',
            '950': '#1e1b4b',
        },
    },
    'SIDEBAR': {
        'show_search': False,  # Search in applications and models names
        'show_all_applications': False,  # Dropdown with all applications and models
        'navigation': [
            {
                'title': _('Navigation'),
                'separator': True,  # Top border
                'collapsible': True,  # Collapsible group of links
                'items': [
                    {
                        'title': _('Dashboard'),
                        'icon': 'dashboard',  # Supported icon set: https://fonts.google.com/icons
                        'link': reverse_lazy('admin:index'),
                        'permission': lambda request: request.user.is_superuser,
                    },
                    {
                        'title': _('Quản lý người dùng'),
                        'icon': 'people',
                        'link': reverse_lazy('admin:account_customuser_changelist'),
                        'permission': lambda request: request.user.is_superuser,
                    },
                    {
                        'title': _('Quản lý nền tảng'),
                        'icon': 'people',
                        'link': reverse_lazy('admin:platform_share_platform_changelist'),
                        'permission': lambda request: request.user.is_superuser,
                    },
                               {
                        'title': _('Quản lý tài khoản chia sẻ'),
                        'icon': 'people',
                        'link': reverse_lazy('admin:platform_share_platformaccount_changelist'),
                        'permission': lambda request: request.user.is_superuser,
                    },
                ],
            },
        ],
    },
}

LOGIN_URL = '/login/'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        
    ),
}
from datetime import timedelta

# Optional: Configure JWT settings (expiration, etc.)
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),  # Thời gian hết hạn của access token
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),  # Thời gian hết hạn của refresh token
    'ROTATE_REFRESH_TOKENS': True,  # Cho phép làm mới refresh token
    'BLACKLIST_AFTER_ROTATION': True,  # Đưa token vào blacklist sau khi refresh
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,  # Sử dụng SECRET_KEY của Django để ký token
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
}